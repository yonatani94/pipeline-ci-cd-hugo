# Azure DevOps Build Pipeline
#
# This job template is used in the build stage. It does the following:
# 1. Downloads specified version of Hugo executable
# 2. Installs Hugo executable
# 3. Executes Hugo to build site with specified arguments
# 4. Executes Hugo `deploy` command to log all files that would be
#    added/updated/deleted to the Azure site
# 5. (Optional) script for create api folder and invokee all API from antoher repos.  
# 5. Copy all relevant built files => staging folder (workaround for archiving)
# 7. Archive (e.g. zip) all built files
# 8. Publish Hugo installer for later stages
# 9. Publish built site codebase for later stages

parameters:
  # unique name of the job
  name: ''
  # friendly name of the job
  displayName: ''
  # Hugo version to use in stage; e.g. #.#.# (do not include 'v' prefix)
  hugo_version: ''
  # Hugo value for argument --baseUrl
  hugo_config_baseUrl: ''
  # Hugo argument flags to include
  hugo_config_flags: ''
  # Azure Storage Account name & access key where site is deployed
  # Unique tag for site type
  build_tag: ''

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  variables:
  - group: PAT 
  pool:
    vmImage: ubuntu-latest
  steps:
    - checkout: self
      submodules: true # permit submodules in the repo
    # 1. Downloads specified version of Hugo executable
    - script: wget https://github.com/gohugoio/hugo/releases/download/v${{parameters.hugo_version}}/hugo_${{parameters.hugo_version}}_Linux-64bit.deb
        -O '$(Pipeline.Workspace)/hugo_${{ parameters.hugo_version }}_Linux-64bit.deb'
      displayName: Download Hugo version Linux x64
    # 2. Installs Hugo executable
    - script: sudo dpkg -i $(Pipeline.Workspace)/hugo*.deb
      displayName: Install Hugo
    # 3. Executes Hugo to build site with specified arguments
    - script: hugo -b '${{ parameters.hugo_config_baseUrl }}'
      workingDirectory: $(Build.Repository.LocalPath)
      displayName: Build site with Hugo
    # 4. Executes Hugo `deploy` command to log all files that would be
    #    The argument --dryRun tells Hugo to just log what it will do, but donâ€™t upload them
    #    added/updated/deleted to the Azure site
    # 5. Copy all relevant built files => staging folder (workaround for archiving)
    - task: CopyFiles@2
      displayName: Copy Hugo built site files to staging folder "deploy"
      inputs:
        Contents: |
          scripts/**
          config.toml
          resources/**
          layout/**
          content/**
          static/**
          themes/**       
        TargetFolder: deploy
     # 6. (Optional) script for create api folder and invokee all API from antoher repos from    
    - script: npm install && cd $(Pipeline.Workspace)/s/scripts && node index.js $(token)
      env:
        SYSTEM_ACCESSTOKEN: $(token)
      displayName: Create API Folder By Script        
    # 7. Archive (e.g. zip) all built files
    - task: ArchiveFiles@2
      displayName: Archive built site files
      inputs:
        rootFolderOrFile: ./deploy
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Pipeline.Workspace)/hugo-build.zip
        replaceExistingArchive: true
        verbose: true
    # 8. Publish Hugo installer for later stages
    - publish: $(Pipeline.Workspace)/hugo_${{ parameters.hugo_version }}_Linux-64bit.deb
      artifact: hugo-installer
    # 9. Publish built site codebase for later stages
    - publish: $(Pipeline.Workspace)/hugo-build.zip
      artifact: build-${{ parameters.build_tag }}